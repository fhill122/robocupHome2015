
RobocupHome 2015

To run:
	Connect bluetooth
	In each terminal, baxterConnect, baxter2015(if not sourced)
	Terminal 1: roslaunch openni_launch openni.launch
	Terminal 2: rosrun rqt_reconfigure rqt_reconfigure , in camera/driver, set image_mode to sxga_15hz, close window, rosrun utilities gripper_test_both
	Terminal 3: rosrun baxter_interface joint_trajectory_action_server.py
	Terminal 4: rosrun vision object_detector
	Terminal 5: rosrun utilities server.py ,  then check connection with phone
	
	Terminal 5: rosrun manipulation move_plate_to_start_position_using_trajectory

to add/modify constants declaration:
	edit src/core/AllConstants.ini
	rosrun core generateAllConstants 

To do:
	create a roslaunch for above


***************

Part: Ivan

To source and cd to the workspace (do it on each terminal tab/window)
	1.baxterConnect
	2.baxter2015

#check baxter connection
	baxterPing

#to use kinect
	1.roslaunch openni_launch openni.launch
	2. rosrun rqt_reconfigure rqt_reconfigure , in camera/driver, set image_mode to sxga_15hz (can be closed)
	2.to test: rosrun image_view image_view image:=/camera/rgb/image_color

#to use gripper
	rostopic pub /gripper_test/request utilities/gripperTestRequest -1 '[0,now,base_link]' 0 3 
	rostopic pub /gripper_test_both/request utilities/gripperTestRequest -1 '[0, now,base_link]' 0 5 
	a=0 1
	b= 3 left 4 right 5 both

#to locate an object in database
	1.roslaunch openni_launch openni.launch, change resolution
	2.rosrun vision object_detect
	3.rosservice call /vision/get_object_position Object
	
#to calibrate plate location
	1. to write a function to calibrate
	
#to get end point position
	rostopic echo /robot/limb/left/endpoint_state/pose/position
#to get joint angle
	rostopic echo /robot/joint_states/position
	['head_nod', 'head_pan', 'left_e0', 'left_e1', 'left_s0', 'left_s1', 'left_w0', 'left_w1', 'left_w2', 'right_e0', 'right_e1', 'right_s0', 'right_s1', 'right_w0', 'right_w1', 'right_w2', 'torso_t0']

	
# trajectory server
	rosrun baxter_interface joint_trajectory_action_server.py

# to test socket server:
	duration in millis
	rosservice call /socket_android/command_android "send command, manual send response back/duration"
	rosservice call /socket_android/command_android "/send command, pop up to speak/duration"
	rosservice call /socket_android/command_android ".send command, and that's all/duration"

	for /socket_android/android_interact, rosrun server_tester.py
#miscellaneous
	1. if control+c cannot terminate, control+\
	
	
******************
